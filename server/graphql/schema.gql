scalar Date

type User {
  id: ID!
  email: String!,
  name: String,
  entries(status: UserEntryStatus = null): [UserEntry!]!
}

type Entry {
  id: ID!
  url: String!
  title: String!
  originalContent: String!
  creationDate: Date!
  published: Date!
  author: String
  excerpt: String
  content: String
  imageUrl: String
  wordCount: Int
  duration: Int
}

enum UserEntryStatus {
  NEW LATER FAVORITE ARCHIVED
}

type UserEntry {
  id: ID!
  user: User!
  entry: Entry!
  creationDate: Date!
  lastUpdateDate: Date
  progress: Int
  status: UserEntryStatus!
  tags: [String!]!
}

input EntryUpdateInput {
  id: ID!
  progress: Int
  status: UserEntryStatus
  tags: [String!]
}

type Query {
  me: User
  userEntry(userEntryId: ID!): UserEntry!
}

type Mutation {
  addUserEntry(url: String!): UserEntry!
  updateUserEntry(params: EntryUpdateInput): UserEntry!
}

schema {
  query: Query
  mutation: Mutation
}
