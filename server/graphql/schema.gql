scalar Date

type User {
  id: ID!
  email: String!,
  name: String,
  avatarUrl: String,
  entries(status: UserEntryStatus = null): [UserEntry!]!
  feeds: [Feed!]!
}

type Entry {
  id: ID!
  url: String!
  title: String!
  originalContent: String!
  creationDate: Date!
  publicationDate: Date
  author: String
  excerpt: String
  content: String
  imageUrl: String
  wordCount: Int
  duration: Int
}

enum UserEntryStatus {
  NEW LATER FAVORITE ARCHIVED
}

type UserEntry {
  id: ID!
  user: User!
  entry: Entry!
  creationDate: Date!
  lastUpdateDate: Date
  progress: Int
  status: UserEntryStatus!
  tags: [String!]!
}

type Feed {
  id: ID!
  feedType: FeedType!
  uri: String!
}

enum FeedType {
  RSS
}

input EntryUpdateInput {
  id: ID!
  progress: Int
  status: UserEntryStatus
  tags: [String!]
}

input AddUserEntryInput {
  url: String!
  creationDate: Date
  status: UserEntryStatus
  tags: [String!]
}

input SubscribeToFeedInput {
  uri: String!
  type: FeedType!
}

type Query {
  me: User
  userEntry(userEntryId: ID!): UserEntry!
  bookmarkletToken: String!
}

type Mutation {
  addUserEntry(addUserEntryInput: AddUserEntryInput!): UserEntry!
  batchAddUserEntries(batchAddUserEntriesInput: [AddUserEntryInput!]!): [UserEntry]!
  updateUserEntry(entryUpdateInput: EntryUpdateInput!): UserEntry!

  subscribeToFeed(subscribeToFeedInput: SubscribeToFeedInput!): Feed!
  batchSubscribeToFeeds(batchSubscribeToFeedsInput: [SubscribeToFeedInput!]!): [Feed]!
  unsubscribeFromFeed(id: ID!): Boolean!
  batchUnsubscribeFromFeeds(ids: [ID!]!): [Boolean!]!

  deleteAllMyData: Boolean!
}

schema {
  query: Query
  mutation: Mutation
}
